{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.1",
    "title": "YourPet API docs",
    "description": "API documentation for GoIT project 'Your Pet'. [Backend github repository](https://github.com/Lusiy321/final-project-yourpet-backend)",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://final-project-yourpe-backend.onrender.com"
    }
  ],

  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Posts",
      "description": "Posts endpoints"
    },
    {
      "name": "Pets",
      "description": "My Pets endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentication",
        "parameters": [],
        "requestBody": {
          "description": "Authentication's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "403": {
            "description": "Email doesn't exist / Password is wrong",
            "content": {}
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout method",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/users/update": {
      "put": {
        "tags": ["Auth"],
        "summary": "Update user data",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Object with session's id",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid refresh token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid refresh token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/posts/": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get all posts",
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },

    "/posts/my": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get post by user ID",
        "security": [
          {
            "Bearer": []
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostResponse"
                }
              }
            }
          },

          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/posts/add": {
      "post": {
        "tags": ["Posts"],
        "summary": "Add post",
        "security": [
          {
            "Bearer": []
          }
        ],

        "requestBody": {
          "description": "post's review object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / Invalid 'postId' / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "post hasn't been finished yet",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/posts/{postId}": {
      "put": {
        "tags": ["Posts"],
        "summary": "Update post",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "description": "post's id",
            "required": true,
            "schema": {
              "type": "string",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "description": "Posts object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/posts/favorite/{postId}": {
      "put": {
        "tags": ["Posts"],
        "summary": "Add or del to favorite posts",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "description": "post's id",
            "required": true,
            "schema": {
              "type": "string",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/posts/favget/": {
      "get": {
        "tags": ["Posts"],
        "summary": "Get favorite posts",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/posts/del/{postId}": {
      "delete": {
        "tags": ["Posts"],
        "summary": "Del one post",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "required": true,
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostResponse"
                }
              }
            }
          },

          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/pet/": {
      "get": {
        "tags": ["Pets"],
        "summary": "Get pet by user ID",
        "security": [
          {
            "Bearer": []
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid params",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/pet/add": {
      "post": {
        "tags": ["Pets"],
        "summary": "Add pet",
        "security": [
          {
            "Bearer": []
          }
        ],

        "requestBody": {
          "description": "pet's review object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / Invalid 'postId' / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "403": {
            "description": "post hasn't been finished yet",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/pet/del/{postId}": {
      "delete": {
        "tags": ["Pets"],
        "summary": "Del pet",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "postId",
            "required": true,
            "schema": {
              "type": "string",
              "minimum": 1
            },
            "description": "The Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPetResponse"
                }
              }
            }
          },

          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mail_on123@gmail.com",
            "description": "User's email",
            "format": "email",
            "minLength": 2,
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123",
            "minLength": 8,
            "maxLength": 100
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "00.00.0000"
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+38000000000"
          },
          "location": {
            "type": "string",
            "description": "User's location",
            "example": "Kyiv"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatarURL",
            "example": "null"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "null"
          },
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "507f1f77bcf86cd799439011"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "null"
          }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "mail_on123@gmail.com",
            "format": "email",
            "minLength": 2,
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123",
            "minLength": 8,
            "maxLength": 100
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0NmYzM2VhYWU3NTA0NGZkMWY5MzM4MiIsImlhdCI6MTY4NTAxMDIyNCwiZXhwIjoxNjg1MDEzODI0fQ.w_ozGlytvwaL13Le-FC5V2IFkfbBKOxmuIp0AkBKuYg"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "null"
          }
        }
      },
      "UpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Ann",
            "minLength": 2,
            "maxLength": 80
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "mail_on123@gmail.com",
            "format": "email",
            "minLength": 2,
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123",
            "minLength": 6
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "00.00.0000",
            "minLength": 10
          },
          "phone": {
            "type": "string",
            "description": "User's phone",
            "example": "+38000000000",
            "minLength": 12,
            "maxLength": 12
          },
          "location": {
            "type": "string",
            "description": "User's location",
            "example": "Kyiv",
            "minLength": 2,
            "maxLength": 30
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "https://www.google.com/url?sa=i&url=https%3A%2F%2Fuk.wikipedia.org%2Fwiki%2F%25D0%259F%25D0%25B5%25D1%2580%25D0%25B5%25D0%25BA%25D0%25BB%25D0%25B0%25D0%25B4%25D0%25B0%25D1%2587_Google&psig=AOvVaw1dmOpWRFabw3eC4YyON3GA&ust=1685107611309000&source=images&cd=vfe&ved=0CBEQjRxqFwoTCJirt5bJkP8CFQAAAAAdAAAAABAJ"
          }
        }
      },

      "AddPostRequest": {
        "required": [
          "title",
          "name",
          "petBirthday",
          "breed",
          "price",
          "sex",
          "description",
          "category",
          "location",
          "avatar"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Sell my preaty dog",
            "description": "Post title",
            "minLength": 1,
            "maxLength": 254
          },
          "name": {
            "type": "string",
            "example": "Miyamoto Musashi",
            "description": "Post author",
            "minLength": 2,
            "maxLength": 40
          },
          "petBirthday": {
            "type": "string",
            "example": "01.01.2000",
            "minlength": 10,
            "maxlength": 10,
            "description": "Pet Birthday year"
          },
          "breed": {
            "type": "string",
            "example": "Spaniel",
            "description": "Pet breed",
            "minlength": 3,
            "maxlength": 20
          },
          "price": {
            "type": "string",
            "example": "110$",
            "description": "Pet price",
            "minlength": 1,
            "maxlength": 18
          },
          "sex": {
            "type": "string",
            "example": "Male",
            "description": "Set sex for your pet",
            "minlength": 4,
            "maxlength": 6
          },
          "description": {
            "type": "string",
            "example": "This is my dog...",
            "description": "Set description for your post",
            "minlength": 10,
            "maxlength": 280
          },
          " category": {
            "type": "string",
            "example": "sell, lost-found, for-free",
            "description": "Set category for your pet",
            "minlength": 4,
            "maxlength": 10
          },
          "location": {
            "type": "string",
            "example": "Kyiv",
            "description": "Set location for your post",
            "minlength": 2,
            "maxlength": 30
          },
          "avatar": {
            "type": "string",
            "example": "https://www.purina.co.uk/sites/default/files/styles/",
            "description": "Set avatar link for your pet",
            "minlength": 4,
            "maxlength": 10
          }
        }
      },
      "AddPostResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Sell my preaty dog",
            "description": "Post title",
            "minLength": 1,
            "maxLength": 254
          },
          "name": {
            "type": "string",
            "example": "Miyamoto Musashi",
            "description": "Post author",
            "minLength": 2,
            "maxLength": 40
          },
          "petBirthday": {
            "type": "string",
            "example": "01.01.2000",
            "minlength": 10,
            "maxlength": 10,
            "description": "Pet Birthday year"
          },
          "breed": {
            "type": "string",
            "example": "Spaniel",
            "description": "Pet breed",
            "minlength": 3,
            "maxlength": 20
          },
          "price": {
            "type": "string",
            "example": "110$",
            "description": "Pet price",
            "minlength": 1,
            "maxlength": 18
          },
          "sex": {
            "type": "string",
            "example": "Male",
            "description": "Set sex for your pet",
            "minlength": 4,
            "maxlength": 6
          },
          "description": {
            "type": "string",
            "example": "This is my dog...",
            "description": "Set description for your post",
            "minlength": 10,
            "maxlength": 280
          },
          " category": {
            "type": "string",
            "example": "sell, lost-found, for-free",
            "description": "Set category for your pet",
            "minlength": 4,
            "maxlength": 10
          },
          "location": {
            "type": "string",
            "example": "Kyiv",
            "description": "Set location for your post",
            "minlength": 2,
            "maxlength": 30
          },
          "avatar": {
            "type": "string",
            "example": "https://www.purina.co.uk/sites/default/files/styles/",
            "description": "Set avatar link for your pet",
            "minlength": 4,
            "maxlength": 10
          },
          "favorite": {
            "type": "array",
            "example": "[64747a4756c34fa3d3fcf31b]",
            "minlength": 2,
            "maxlength": 30
          },
          "owner": {
            "type": "array",
            "example": "{id:6470ad832cfa126519500989,email:inga@mail.com,phone:+38000000000}",
            "minlength": 2,
            "maxlength": 30
          }
        }
      },
      "GetPostResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Sell my preaty dog",
            "description": "Post title",
            "minLength": 1,
            "maxLength": 254
          },
          "name": {
            "type": "string",
            "example": "Miyamoto Musashi",
            "description": "Post author",
            "minLength": 2,
            "maxLength": 40
          },
          "petBirthday": {
            "type": "string",
            "example": "01.01.2000",
            "minlength": 10,
            "maxlength": 10,
            "description": "Pet Birthday year"
          },
          "breed": {
            "type": "string",
            "example": "Spaniel",
            "description": "Pet breed",
            "minlength": 3,
            "maxlength": 20
          },
          "price": {
            "type": "string",
            "example": "110$",
            "description": "Pet price",
            "minlength": 1,
            "maxlength": 18
          },
          "sex": {
            "type": "string",
            "example": "Male",
            "description": "Set sex for your pet",
            "minlength": 4,
            "maxlength": 6
          },
          "description": {
            "type": "string",
            "example": "This is my dog...",
            "description": "Set description for your post",
            "minlength": 10,
            "maxlength": 280
          },
          "category": {
            "type": "string",
            "example": "sell, lost-found, for-free",
            "description": "Set category for your pet",
            "minlength": 4,
            "maxlength": 10
          },
          "location": {
            "type": "string",
            "example": "Kyiv",
            "description": "Set location for your post",
            "minlength": 2,
            "maxlength": 30
          },
          "avatar": {
            "type": "string",
            "example": "https://www.purina.co.uk/sites/default/files/styles/",
            "description": "Set avatar link for your pet",
            "minlength": 4,
            "maxlength": 10
          },
          "favorite": {
            "type": "array",
            "example": "[64747a4756c34fa3d3fcf31b]",
            "minlength": 2,
            "maxlength": 30
          },
          "owner": {
            "type": "array",
            "example": "{id:6470ad832cfa126519500989,email:inga@mail.com,phone:+38000000000}",
            "minlength": 2,
            "maxlength": 30
          },
          "_id": {
            "type": "string",
            "description": "Post id",
            "example": "646f7ed3097a610ea1c91e7b"
          },
          "createdAt": {
            "type": "string",
            "description": "2023-05-27T16:13:22.740Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "2023-05-28T18:29:08.687Z"
          }
        }
      },
      "GetPetResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Barsik",
            "description": "Pet name",
            "minLength": 2,
            "maxLength": 40
          },
          "petBirthday": {
            "type": "string",
            "example": "01.01.2000",
            "minlength": 10,
            "maxlength": 10,
            "description": "Pet Birthday year"
          },
          "breed": {
            "type": "string",
            "example": "Spaniel",
            "description": "Pet breed",
            "minlength": 3,
            "maxlength": 20
          },
          "comments": {
            "type": "string",
            "example": "This is my dog...",
            "description": "Set description for your post",
            "minlength": 10,
            "maxlength": 280
          },
          "avatar": {
            "type": "string",
            "example": "https://www.purina.co.uk/sites/default/files/styles/",
            "description": "Set avatar link for your pet",
            "minlength": 4,
            "maxlength": 10
          },

          "owner": {
            "type": "array",
            "example": "{id:6470ad832cfa126519500989}",
            "minlength": 2,
            "maxlength": 30
          },
          "_id": {
            "type": "string",
            "description": "Post id",
            "example": "646f7ed3097a610ea1c91e7b"
          },
          "createdAt": {
            "type": "string",
            "description": "2023-05-27T16:13:22.740Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "2023-05-28T18:29:08.687Z"
          }
        }
      },
      "AddPetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Barsik",
            "description": "Pet name",
            "minLength": 2,
            "maxLength": 40
          },
          "petBirthday": {
            "type": "string",
            "example": "01.01.2000",
            "minlength": 10,
            "maxlength": 10,
            "description": "Pet Birthday year"
          },
          "breed": {
            "type": "string",
            "example": "Spaniel",
            "description": "Pet breed",
            "minlength": 3,
            "maxlength": 20
          },
          "comments": {
            "type": "string",
            "example": "This is my dog...",
            "description": "Set description for your post",
            "minlength": 10,
            "maxlength": 280
          },
          "avatar": {
            "type": "string",
            "example": "https://www.purina.co.uk/sites/default/files/styles/",
            "description": "Set avatar link for your pet",
            "minlength": 4,
            "maxlength": 10
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
